String Builder : - String Builder is not a String if we want to convert into String then we use 'toString()'
-> char ch = 'a' is not Possible to apply 'toString()' but Character class it is Possible Character ch = 'a'
-> StringBuilder sb = new StringBuilder(); 
-> java.lang.Object
    ↳ java.lang
        ↳ Class StringBuilder
-> append() method
↳ The StringBuilder append() method concatenates the given argument with this String.

-> reverse() method
↳ The reverse() method of StringBuilder class reverses the current string. 

-> insert() method
↳ The StringBuilder insert() method inserts the given string with this string at the given position.
↳ sb.insert(1,"Java");

-> replace() method
↳ The StringBuilder replace() method replaces the given string from the specified beginIndex and endIndex.
↳ sb.replace(1,3,"Java");  

-> delete() method
↳ The delete() method of StringBuilder class deletes the string from the specified beginIndex to endIndex.
↳ sb.delete(1,3);
------------------------------------------------------------------
-> Java String intern()
↳ The Java String class intern() method returns the interned string. 
  It returns the canonical representation of string.
  It can be used to return string from memory if it is created by a new keyword. 
  It creates an exact copy of the heap string object in the String Constant Pool.

-> The need and working of the String.intern() |
|
↳ When a string is created in Java, it occupies memory in the heap.
  Also, we know that the String class is immutable. Therefore,
  whenever we create a string using the new keyword, 
  new memory is allocated in the heap for corresponding string,
  which is irrespective of the content of the array. 
  Consider the following code snippet.
    String str = new String("Welcome To.");   
    String str1 = new String("Welcome To. ");  
    System.out.print(str1 == str); // prints false  

The print statement prints false because separate memory is allocated for each string literal.
  Thus, two new string objects are created in the memory
  i.e. str and str1. that holds different references.

We know that creating an object is a costly operation in Java. 
Therefore, to save time, Java developers came up with the concept of String Constant Pool (SCP).
The SCP is an area inside the heap memory. It contains the unique strings. 
In order to put the strings in the string pool, one needs to call the intern() method. 
Before creating an object in the string pool, 
the JVM checks whether the string is already present in the pool or not. 
If the string is present, its reference is returned.

    String str = new String("Welcome to ").intern(); // statement - 1  
    String str1 = new String("Welcome to ").intern(); // statement - 2  
    System.out.print(str1 == str); // prints true  

-> heapPriority.poll() gives the higest number in priority queue

In Java, the static keyword is used to indicate that a particular member
(variable, method, block, or nested class) belongs to the class itself, 
rather than to instances (objects) of the class. This means you can access static members without creating an object of the class.

Key Use Cases of static in Java:
Static Variables (Class Variables)
Static Methods
Static Blocks
Static Nested Classes

Key Rules:

Static methods cannot access non-static (instance) variables or methods.
Static methods can only call other static methods or use static variables directly.

git status                  # Check the status of your repository
git add .                   # Stage all changes
git commit -m "Daily update message"  # Commit changes
git pull origin main        # Pull latest updates from remote
git push origin main        # Push your changes to the remote

--->END<---
Due to more than 3 hours of inactivity, I have not received a response to my messages.
 Therefore, I am closing this question. Feel free to reopen the chat and tag me; I will be happy to explain.
--->END<---